Test Case ID;Description;Steps to Reproduce;Expected Result;Actual Result;Status;Notes
WM-001;Connect wallet;"1. Open the dApp. 2. Click on the ""Connect Wallet"" button. 3. Approve the connection in MetaMask.";The user's wallet address is displayed in the header.;Ok;PASSED;Human did it
WM-002;Disconnect wallet;"1. With the wallet connected, click on the wallet address in the header. 2. Click ""Disconnect"".";"The dApp disconnects from the wallet, and the ""Connect Wallet"" button reappears.";Ok;PASSED;Human did it
WM-003;Switch network;1. With the wallet connected, switch to a different network in MetaMask (e.g., Mainnet).;The dApp displays a message prompting the user to switch back to the Sepolia network.;Failed, I changed network on Metamask and dApp didn't tell me anything.;FAILED;Human performed the test
MF-001;Mint a new product (with MINTER_ROLE);"1. Connect a wallet with MINTER_ROLE. 2. Go to the ""Manufacturer Dashboard"". 3. Fill in all product details. 4. Click ""Mint Product"" and confirm the transaction.";"The product is successfully minted. A new NFT is created and appears on the ""My Products"" page.";Ok;PASSED;Human performed the test. Uploaded a file of 1,84Mb to IPFS
MF-002;Attempt to mint a new product (without MINTER_ROLE);"1. Connect a wallet without MINTER_ROLE. 2. Go to the ""Manufacturer Dashboard"".";"The ""Mint Product"" button should be disabled or the transaction should fail with an error message.";Ok;PASSED;Frontend returns Access Denied.
MF-003;List a product for sale;"1. Go to the ""My Products"" page. 2. Select a product. 3. Approve the marketplace contract. 4. Set a price and click ""List for Sale"".";"The product is listed on the marketplace and visible on the ""Marketplace"" page.";Ok;PASSED;Human performed the test. Price set to: 0.0002ETH
MF-004;Unlist a product from sale;"1. Go to the ""My Products"" page. 2. Select a listed product. 3. Click ""Unlist from Sale"".";The product is removed from the marketplace.;Ok;PASSED;Human performed the test
MF-005;List a product with a zero or negative price;"1. Go to the ""My Products"" page. 2. Attempt to list with a price of 0 or a negative number.";The UI should prevent this, or the smart contract transaction should fail.;Ok;PASSED;Fronted does not allow 0 or negative number. Couldn't test the smart contract
MF-006;Mint a product with very long or special character inputs;"1. Go to the ""Manufacturer Dashboard"". 2. Enter unusually long strings or strings with special characters (@#$!%^&*()) into the product fields. 3. Click ""Mint Product"".";The dApp should handle the inputs gracefully, either by minting successfully or by displaying a clear validation error message. The UI should not break.;Ok;PASSED;Product minted successfully
MP-001;Purchase a product;"1. Connect a buyer's wallet. 2. Go to the ""Marketplace"" page. 3. Select a product and click ""Initiate Purchase"". 4. Fund the escrow contract.";The purchase is initiated, and the escrow is funded. The product status updates accordingly.;Ok;PASSED;Human performed the test
MP-002;Seller marks product as shipped;"1. Connect the seller's wallet. 2. Go to the ""My Sales"" page. 3. Select the sold product. 4. Click ""Mark as Shipped"".";"The product status is updated to ""Shipped"".";Ok;PASSED;Human performed the test
MP-003;Buyer confirms receipt;"1. Connect the buyer's wallet. 2. Go to the ""My Purchases"" page. 3. Select the purchased product. 4. Click ""Confirm Receipt"".";The transaction is completed. The buyer receives the NFT, and the seller receives the funds.;Ok;PASSED;Human performed the test
MP-004;Attempt to purchase own product;"1. Connect the seller's wallet. 2. Go to the ""Marketplace"" page. 3. Try to purchase the listed product.";The transaction should fail, or the button should be disabled.;Ok;PASSED;Button is disabled in the frontend. Couldn't check the smart contract.
MP-005;Attempt to purchase a product already in escrow;1. Buyer 1 initiates a purchase for Product A. 2. Before Buyer 1 funds the escrow, Buyer 2 attempts to initiate a purchase for the same Product A.;Buyer 2's attempt to initiate the purchase should fail with a clear error message indicating the product is already locked in a sale.;Failed. ;FAILED;Buyer 1 Initiate the purchase but DID NOT fund the escrow. Buyer Initiated the purchase. Initiating the purchase it looks like Buyer 2 funded the escrow. Seller confirmed the shipment and the new owner is Buyer 1.
MP-006;Buyer does not fund the escrow within the deadline;1. Buyer initiates a purchase. 2. Buyer waits for the fundingDeadline to pass without sending funds. 3. Anyone calls the reclaimTokenAfterDeadline function on the ProductEscrow contract.;The escrow contract is cancelled. The NFT is returned to the seller. The seller can list the product again.;;Skipped;Cannot be tested without running the dApp
MP-007;Seller does not ship the product within the deadline;1. Buyer initiates and funds a purchase. 2. Seller waits for the shipmentDeadline to pass without marking the item as shipped. 3. The buyer calls the reclaimFundsAfterDeadline function on the ProductEscrow contract.;The escrow contract is cancelled. The funds are returned to the buyer. The NFT is returned to the seller.;;Skipped;Cannot be tested without running the dApp
MP-008;Buyer does not confirm receipt within the deadline;1. Buyer funds escrow, seller ships product. 2. Buyer waits for the receiptDeadline to pass without confirming receipt. 3. The seller calls the claimFundsAfterDeadline function on the ProductEscrow contract.;The transaction is finalized. The funds are transferred to the seller. The NFT is transferred to the buyer.;;Skipped;Cannot be tested without running the dApp
PS-001;Add a status update to a product;"1. Go to a product page. 2. Add a note and location in the ""Add Status Update"" section. 3. Click ""Submit Update"".";"The new status update appears in the ""Status History"" section.";;PASSED;Human performed the test
PS-002;Add a status update with an attachment;"1. Go to a product page. 2. Add a note, location, and file attachment. 3. Click ""Submit Update"".";The status update appears with a link to the uploaded file on IPFS.;;PASSED;Human performed the test
PS-003;Add a status update to a product in escrow;1. A product is listed for sale and an escrow has been initiated. 2. The original owner (seller) attempts to add a status update.;The transaction should succeed, as the seller should still be able to update the product's history while it is in escrow.;;FAILED;In the frontend, when a product is in an escrow, Add Status Update panel is not visible. Maybe it's just a condition on the frontend.
AD-001;Grant MINTER_ROLE;"1. Connect the admin wallet. 2. Go to the ""Admin"" page. 3. Enter a wallet address and click ""Grant Minter Role"".";The specified address is granted the MINTER_ROLE.;;PASSED;Human performed the test
AD-002;Revoke MINTER_ROLE;"1. Connect the admin wallet. 2. Go to the ""Admin"" page. 3. Enter a wallet address and click ""Revoke Minter Role"".";The specified address has its MINTER_ROLE revoked.;;PASSED;Human performed the test
AD-003;Access Admin page without admin role;"1. Connect a non-admin wallet. 2. Try to navigate to the ""/admin"" page.";"The user is redirected or shown an ""Unauthorized"" message.";;PASSED;Human performed the test
TC-DR-001;Open Dispute (Seller);"1. Using Account A, mint a new product. 2. List the product for sale. 3. Using Account B, initiate and fund the purchase. 4. Using Account A, mark the product as shipped. 5. Using Account A, navigate to the product page. 6. Click the ""Open Dispute"" button. 7. Enter a reason for the dispute in the modal and confirm.";The sale status changes to `Disputed`. A `DisputeOpened` event is emitted on the `ProductEscrow` contract.;;PASSED;Weird thing is that seller opens a dispute, both seller and buyer can see the Submit evidence form
TC-DR-002;Open Dispute (Buyer);"1. Repeat steps 1-4 from TC-DR-001. 2. Using Account B, navigate to the product page. 3. Click the ""Open Dispute"" button. 4. Enter a reason for the dispute in the modal and confirm.";The sale status changes to `Disputed`. A `DisputeOpened` event is emitted on the `ProductEscrow` contract.;;PASSED;Weird thing is that buyer opens a dispute, both seller and buyer can see the Submit evidence form
TC-DR-003;Submit Evidence (Seller);"1. Execute TC-DR-001 or TC-DR-002 to get the sale into `Disputed` state. 2. Using Account A, navigate to the product page. 3. Locate the ""Submit Evidence"" form. 4. Enter a dummy IPFS hash (e.g., `ipfs://Qm...`) and click ""Submit Evidence"".";An `EvidenceSubmitted` event is emitted on the `ProductEscrow` contract with the provided IPFS hash.;;FAILED;"I always receive the error ""Failed to submit evidence."" Also I don't like the format to put the hash, I believe it is more friendly uploading a file"
TC-DR-004;Submit Evidence (Buyer);"1. Execute TC-DR-001 or TC-DR-002 to get the sale into `Disputed` state. 2. Using Account B, navigate to the product page. 3. Locate the ""Submit Evidence"" form. 4. Enter a dummy IPFS hash (e.g., `ipfs://Qm...`) and click ""Submit Evidence"".";An `EvidenceSubmitted` event is emitted on the `ProductEscrow` contract with the provided IPFS hash.;;FAILED;"I always receive the error ""Failed to submit evidence."" Also I don't like the format to put the hash, I believe it is more friendly uploading a file"
TC-DR-005;Resolve Dispute (Funds to Seller);1. Execute TC-DR-001 or TC-DR-002 to get the sale into `Disputed` state. 2. (Optional) Execute TC-DR-003 and TC-DR-004 to submit evidence. 3. Using Account C (Dispute Resolver), call the `resolveDispute` function on the `ProductEscrow` contract, specifying the NFT recipient as the buyer and the funds recipient as the seller.;The NFT is transferred to the buyer, and the funds are transferred to the seller. A `DisputeResolved` event is emitted. The escrow contract is finalized.;;Skipped;Needs manual testing
TC-DR-006;Resolve Dispute (Refund to Buyer);1. Execute TC-DR-001 or TC-DR-002 to get the sale into `Disputed` state. 2. (Optional) Execute TC-DR-003 and TC-DR-004 to submit evidence. 3. Using Account C (Dispute Resolver), call the `resolveDispute` function on the `ProductEscrow` contract, specifying the NFT recipient as the seller (returning the NFT) and the funds recipient as the buyer (refunding the funds).;The NFT is transferred back to the seller, and the funds are transferred back to the buyer. A `DisputeResolved` event is emitted. The escrow contract is finalized.;;Skipped;Needs manual testing
TC-TF-001;Full Transaction Flow with Fee Verification;1. Setup: Ensure `mintingFeeWei` and `platformFeePercent` are configured in the `CertixNFT` contract (e.g., `mintingFeeWei = 0.01 ETH`, `platformFeePercent = 200` (2%)). Record initial ETH balances of Account A (Minter/Seller), Account B (Buyer), and the Platform Wallet. 2. Minting: Using Account A (Minter/Seller), mint a new product. Observe the transaction details for the minting fee. 3. Listing: Using Account A, list the minted product for sale at a specific price (e.g., `1 ETH`). 4. Purchase & Funding: Using Account B (Buyer), initiate the purchase of the product. Fund the escrow with the exact listing price (`1 ETH`). 5. Shipment & Confirmation: Using Account A, mark the product as shipped. Using Account B, confirm receipt of the product.;1. Minting Fee: Account A's balance decreases by `mintingFeeWei` (plus gas). The Platform Wallet's balance increases by `mintingFeeWei`. 2. Listing: The product is successfully listed for `1 ETH`. 3. Escrow Funding: Account B's balance decreases by `1 ETH` (plus gas). The escrow contract's balance increases by `1 ETH`. 4. Platform Fee: The Platform Wallet's balance increases by `(1 ETH * platformFeePercent / 10000)`. 5. Seller Payout: Account A's balance increases by `1 ETH - (1 ETH * platformFeePercent / 10000)` (minus gas for shipping/confirming). 6. NFT Transfer: The NFT is transferred from Account A to Account B. 7. Final Balances: Verify final balances of Account A, Account B, and Platform Wallet reflect all deductions and transfers accurately.;;Skipped;Needs manual testing
